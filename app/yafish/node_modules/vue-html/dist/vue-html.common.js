'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var hyperx = _interopDefault(require('hyperx'));

var index = function (Vue) {
  Vue.prototype.$html = function () {
    var this$1 = this;
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

    var createElement = hyperx(function (tag, attrs, children) {
      var newAttrs = {};
      var defaults = ['style', 'className', 'key', 'ref', 'refInFor', 'slot'];
      for (var i = 0, list = defaults; i < list.length; i += 1) {
        var key = list[i];

        if (key === 'className') {
          newAttrs.class = attrs.className;
        } else {
          newAttrs[key] = attrs[key];
        }
      }

      for (var key$1 in attrs) {
        if (key$1.substring(0, 2) === 'on') {
          // onClick => on: {click}
          newAttrs.on = newAttrs.on || {};
          var newKey = lowerCaseFirstLetter(key$1.substring(2));
          newAttrs.on[newKey] = attrs[key$1];
        } else if (key$1.substring(0, 8) === 'nativeOn') {
          // nativeOnClick => nativeOn: {click}
          newAttrs.nativeOn = newAttrs.nativeOn || {};
          var newKey$1 = lowerCaseFirstLetter(key$1.substring(8));
          newAttrs.nativeOn[newKey$1] = attrs[key$1];
        } else if (key$1.substring(0, 8) === 'domProps') {
          // domPropsInnerHTML => domProps: {innerHTML}
          newAttrs.domProps = newAttrs.domProps || {};
          var newKey$2 = lowerCaseFirstLetter(key$1.substring(8));
          newAttrs.domProps[newKey$2] = attrs[key$1];
        } else if (defaults.indexOf(key$1) === -1) {
          // all others attrs => {attrs: attr}
          newAttrs.attrs = newAttrs.attrs || {};
          newAttrs.attrs[key$1] = attrs[key$1];
        }
      }

      return this$1.$createElement(tag, newAttrs, children)
    });

    var tree = createElement.apply(void 0, args);
    return tree
  };
};

function lowerCaseFirstLetter(string) {
  return string.charAt(0).toLowerCase() + string.substring(1)
}

module.exports = index;
